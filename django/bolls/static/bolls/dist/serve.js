//__HEAD__
var Bt=Object.create,B=Object.defineProperty,Rt=Object.getPrototypeOf,jt=Object.prototype.hasOwnProperty,Ot=Object.getOwnPropertyNames,Ht=Object.getOwnPropertyDescriptor;var At=r=>B(r,"__esModule",{value:!0});var Ft=(r,t,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of Ot(t))!jt.call(r,s)&&s!=="default"&&B(r,s,{get:()=>t[s],enumerable:!(e=Ht(t,s))||e.enumerable});return r},d=r=>Ft(At(B(r!=null?Bt(Rt(r)):{},"default",r&&r.__esModule&&"default"in r?{get:()=>r.default,enumerable:!0}:{value:r,enumerable:!0})),r);function R(r){let t;return r&&((t=r.toIterable)?t.call(r):r)}var Yt=Symbol.for("#__initor__"),Zt=Symbol.for("#__inited__"),qt=Symbol.for("#__hooks__"),te=Symbol.for("#type"),ee=Symbol.for("#__listeners__");function E(r,t=null){let e={},s=/\$\$\d+\$\$/,i=function(n){return e[n]||(e[n]=t?t(n):{})},o=function(n,l){if(typeof l=="string"){if(l[0]=="$"&&s.test(l))return i(l)}else if(typeof n=="string"&&n[0]=="$"&&s.test(n)){let h=i(n);return Object.assign(h,l),h}return l};return JSON.parse(r,o)}function L(r,t){var e,s,i,o;let a={},n={added:[],changed:[],removed:[],all:[],urls:{}};if(r.assets)for(let l=0,h=R(r.assets),f=h.length;l<f;l++){let u=h[l],c=u.originalPath||u.path;a[c]=u,u.url&&((e=t.urls)[s=u.url]||(e[s]=u))}for(let l=0,h=R(t.assets||[]),f=h.length;l<f;l++){let u=h[l],c=u.originalPath||u.path,_=a[c];u.url&&r.urls&&(r.urls[u.url]=u),_?(_.hash!=u.hash&&(_.invalidated=Date.now(),_.replacedBy=u,u.replaces=_,n.changed.push(u),n.all.push(u),_==r.main&&(n.main=u)),i=a[c],delete a[c]):(n.added.push(u),n.all.push(u))}for(let l=0,h=Object.keys(a),f=h.length,u,c;l<f;l++)u=h[l],c=a[u],c.removed=Date.now(),n.all.push(c);for(let l=0,h=R(n.all),f=h.length;l<f;l++){let u=h[l];(n[o=u.type]||(n[o]=[])).push(u)}return n.removed=Object.values(a),t.changes=n,t}var N=d(require("events")),w=d(require("fs")),$=d(require("path"));var z=Symbol.for("#__initor__"),J=Symbol.for("#__inited__"),U=Symbol.for("#__hooks__"),kt=Symbol.for("#refresh"),W=Symbol.for("#__init__"),j=Symbol.for("#manifest"),V=Symbol.for("#absPath"),O=Symbol.for("#raw"),G=Symbol.for("#watch"),K=Symbol(),Q=class{constructor(t){this[j]=t}get absPath(){return this[V]||(this[V]=this[j].resolve(this))}get name(){return $.default.basename(this.path)}get body(){return this.readSync()}readSync(){return w.default.readFileSync(this.absPath,"utf-8")}pipe(t){return w.default.createReadStream(this.absPath).pipe(t)}toString(){return this.url||this.absPath}},X=class extends N.EventEmitter{static[W](){return this.prototype[z]=K,this}constructor(t={}){var e;super();e=this,this.options=t,this.data={},this.path=t.path,this.refs={},this.reviver=function(s){return new Q(e)},this.init(t.data),this[z]===K&&(this[U]&&this[U].inited(this),this[J]&&this[J]())}get srcdir(){return $.default.resolve($.default.dirname(this.path),this.data.srcdir)}get outdir(){return $.default.resolve($.default.dirname(this.path),this.data.outdir)}get changes(){return this.data.changes||{}}get inputs(){return this.data.inputs}get outputs(){return this.data.outputs}get assets(){return this.data.assets}get urls(){return this.data.urls||{}}get main(){return this.data.main}get cwd(){return process.cwd()}get raw(){return this.data[O]}resolve(t){return t._=="input"?$.default.resolve(this.srcdir||this.cwd,t.path):t._=="output"?$.default.resolve(this.outdir,t.path):$.default.resolve(this.cwd,t.path||t)}resolveAssetPath(t){return $.default.resolve(this.outdir,t)}read(t){return w.default.readFileSync(this.resolve(t),"utf-8")}loadFromFile(t){return w.default.existsSync(t)?w.default.readFileSync(t,"utf-8"):"{}"}init(t=null){return(t||this.path)&&this.update(t),this}update(t){if(t==null&&(this.path?t=this.loadFromFile(this.path):console.warn("cannot update manifest without path")),typeof t=="string"){let e=t;t=E(t,this.reviver),t[O]=e}return this.data=L(this.data||{},t),this.data.changes.all.length&&this.emit("change",this.diff,this),this.data.changes.main&&this.emit("change:main",this.data.main,this),this.data.changes}serializeForBrowser(){return this.data[O]}[kt](t){return!0}watch(){var t=this;if(this[G]!=!0?(this[G]=!0,!0):!1)return this.path&&!process.env.IMBA_HMR&&w.default.watch(this.path,function(e,s){let i=w.default.existsSync(t.path),o=i&&w.default.statSync(t.path);i&&t.update()})}on(t,e){return this.watch(),super.on(...arguments)}};X[W]();var Y=class{static for(t){return new Proxy({},new this(t))}constructor(t){this.getter=t}get target(){return this.getter()}get(t,e){return this.target[e]}set(t,e,s){return this.target[e]=s,!0}},p=Y.for(function(){return globalThis[j]});var A=d(require("cluster")),v=d(require("fs")),P=d(require("path")),nt=d(require("events"));var H=d(require("perf_hooks")),x=Symbol.for("#spinner"),oe=Symbol.for("#__initor__"),ae=Symbol.for("#__inited__"),le=Symbol.for("#__hooks__"),It=Symbol.for("#ctime"),Z=Symbol.for("#IMBA_OPTIONS"),Dt={reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29],black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},b={bold:function(r){return"[1m"+r+"[22m"},red:function(r){return"[31m"+r+"[39m"},green:function(r){return"[32m"+r+"[39m"},yellow:function(r){return"[33m"+r+"[39m"},blue:function(r){return"[94m"+r+"[39m"},gray:function(r){return"[90m"+r+"[39m"},white:function(r){return"[37m"+r+"[39m"},f:function(r,t){let e=Dt[r];return"["+e[0]+"m"+t+"["+e[1]+"m"}};b.warn=b.yellow;b.error=b.red;var C=process.platform!=="win32"||process.env.CI||process.env.TERM==="xterm-256color",Et={info:b.f("yellowBright",C?"\u2139":"i"),success:b.green(C?"\u2714":"\u221A"),warning:b.yellow(C?"\u26A0":"!!"),error:b.red(C?"\xD7":"\u2716"),debug:b.blue(C?"\u2139":"i")},q=["debug","info","success","warning","error","silent"],Lt={"-1":"socket","4":"ip4","6":"ip6"};function Nt(r){let t=b.f;return r=r.replace(/https?\:[^\s\n\)\]]+/g,function(e){return t("blueBright",e)}),r=r.replace(/^[\t\s]*\>[^\n]+/gm,function(e){return t("bold",e)}),r=r.replace(/\t/g,"  "),r=r.replace(/^/gm,"  "),r}function tt(r,...t){let e=b.f;return r=r.replace(/\%([\w\.]+)/g,function(s,i){let o=t.shift();if(i=="markdown")return Nt(o);if(i=="kb")return e("dim",(o/1e3).toFixed(1)+"kb");if(i=="path"||i=="bold")return e("bold",o);if(i=="dim")return e("dim",o);if(i=="address"){let a=Lt[o.addressType];return o.port?e("blueBright",[o.address||"http://127.0.0.1",o.port].join(":")):e("blueBright",a)}else{if(i=="ms")return e("yellow",Math.round(o)+"ms");if(i=="d")return e("blueBright",o);if(i=="red")return e("redBright",o);if(i=="green")return e("greenBright",o);if(i=="yellow")return e("yellowBright",o);if(i=="ref")return e("yellowBright","#"+(o.id||o));if(i=="elapsed"){o!=null&&t.unshift(o);let a=H.performance.now();return e("yellow",Math.round(a)+"ms")}else if(i=="heap"){o!=null&&t.unshift(o);let a=process.memoryUsage().heapUsed/1024/1024;return e("yellow",a.toFixed(2)+"mb")}else return o}}),[r,...t]}var et=null,rt=null,st=class{static get main(){return rt||(rt=new this)}constructor({prefix:t=null,loglevel:e}={}){this[It]=Date.now(),this.prefix=t?tt(...t)[0]:"",this.loglevel=e||process.env.IMBA_LOGLEVEL||globalThis[Z]&&globalThis[Z].loglevel||"info"}write(t,...e){if(q.indexOf(t)<q.indexOf(this.loglevel))return this;let s=Et[t]||t,[i,...o]=tt(...e);return this.prefix&&(i=this.prefix+i),this[x]&&this[x].isSpinning?(t=="success"&&(this[x].clear(),console.log(s+" "+i,...o),this[x].frame()),this[x].text=i):console.log(s+" "+i,...o)}debug(...t){return this.write("debug",...t)}log(...t){return this.write("info",...t)}info(...t){return this.write("info",...t)}warn(...t){return this.write("warn",...t)}error(...t){return this.write("error",...t)}success(...t){return this.write("success",...t)}ts(...t){return this.write("debug",...t,H.performance.now())}spinner(){}get[x](){return et}get proxy(){var t=this;let e=function(...s){return t.info(...s)};return e.info=this.info.bind(this),e.warn=this.warn.bind(this),e.error=this.error.bind(this),e.debug=this.debug.bind(this),e.success=this.success.bind(this),e.ts=this.ts.bind(this),e.logger=this,e}async time(t,e){let s=Date.now();if(e){let i=await e();return this.info(""+t+" %ms",Date.now()-s),i}}},it=new st().proxy;var zt=d(require("module")),ot=d(require("http")),pe=d(require("https")),at=d(require("http2"));function m(r){let t;return r&&((t=r.toIterable)?t.call(r):r)}var lt=Symbol.for("#setup"),ut=Symbol.for("#__initor__"),ht=Symbol.for("#__inited__"),ft=Symbol.for("#__hooks__"),pt=Symbol.for("#__init__"),ct=Symbol.for("#setup?"),dt=Symbol.for("#watch"),Jt=Symbol.for("#dom"),Ut=Symbol.for("#server"),Wt=Symbol.for("#raw"),mt=Symbol(),F={html:{"Content-Type":"text/html"},js:{"Content-Type":"text/javascript"},mjs:{"Content-Type":"text/javascript"},json:{"Content-Type":"application/json"},css:{"Content-Type":"text/css"},otf:{"Content-Type":"font/otf"},ttf:{"Content-Type":"font/ttf"},woff:{"Content-Type":"font/woff"},woff2:{"Content-Type":"font/woff2"},svg:{"Content-Type":"image/svg+xml"},avif:{"Content-Type":"image/avif"},gif:{"Content-Type":"image/gif"},png:{"Content-Type":"image/png"},apng:{"Content-Type":"image/apng"},webp:{"Content-Type":"image/webp"},jpg:{"Content-Type":"image/jpeg"},jpeg:{"Content-Type":"image/jpeg"},bmp:{"Content-Type":"image/bmp"},webm:{"Content-Type":"video/webm"},weba:{"Content-Type":"audio/webm"},avi:{"Content-Type":"video/x-msvideo"},mp3:{"Content-Type":"audio/mpeg"},mp4:{"Content-Type":"video/mp4"},m4a:{"Content-Type":"audio/m4a"},mpeg:{"Content-Type":"video/mpeg"},wav:{"Content-Type":"audio/wav"},ogg:{"Content-Type":"audio/ogg"},ogv:{"Content-Type":"video/ogg"},oga:{"Content-Type":"audio/ogg"},opus:{"Content-Type":"audio/opus"}},y=globalThis.process,_t=class extends Set{call(t,...e){var s;s=[];for(let i of m(this))s.push(i[t](...e));return s}close(t={}){var e;e=[];for(let s of m(this))e.push(s.close(t));return e}reload(t={}){var e;e=[];for(let s of m(this))e.push(s.reload(t));return e}broadcast(t,...e){var s;s=[];for(let i of m(this))s.push(i.broadcast(t,...e));return s}emit(t,e){var s;s=[];for(let i of m(this))s.push(i.emit(t,e));return s}},S=new _t,gt=new(class extends nt.EventEmitter{static[pt](){return this.prototype[ut]=mt,this}constructor(){var t;super(...arguments);t=this,this.autoreload=!1,this.state={},A.default.isWorker&&y.on("message",function(e){if(t.emit("message",e),e[0]=="emit")return t.emit(...e.slice(1))}),this[ut]===mt&&(this[ft]&&this[ft].inited(this),this[ht]&&this[ht]())}[lt](){var t=this;if(!!(this[ct]!=!0?(this[ct]=!0,!0):!1))return this.on("reloading",function(e){var s;console.log("is reloading - from outside"),t.state.reloading=!0,s=[];for(let i of m(S))s.push(i.pause());return s}),this.on("reloaded",async function(e){var s;t.state.reloaded=!0,console.log("is reloaded - from outside"),s=[];for(let o of m(S))s.push(o.close());let i=s;return setTimeout(function(){return y.exit(0)},100),await Promise.all(i),y.exit(0)}),this.on("manifest:change",function(e){if(y.env.IMBA_HMR)return p.update(e)}),this.on("manifest:error",function(e){if(y.env.IMBA_HMR)return p.errors=e,S.broadcast("errors",p.errors)}),!0}send(t){if(y.send instanceof Function)return y.send(t)}on(t,e){return t=="change"&&this.watch(),super.on(...arguments)}watch(){var t=this;if(this[dt]!=!0?(this[dt]=!0,!0):!1)return p.on("change:main",function(){return t.emit("change",p)})}reload(){if(!(this.isReloading!=!0?(this.isReloading=!0,!0):!1))return this;if(this.state.reloading=!0,!y.env.IMBA_SERVE){console.warn("not possible to gracefully reload servers not started via imba start");return}this.send("reload")}}[pt]()),bt=class{constructor(t,e={}){this.url=t,[this.path,this.query]=t.split("?"),this.ext=P.default.extname(this.path),this.headers={"Content-Type":"text/plain","Access-Control-Allow-Origin":"*","cache-control":"public"},Object.assign(this.headers,F[this.ext.slice(1)]||{})}respond(t,e){let s=p.urls[this.url],i=this.headers,o=s?p.resolve(s):p.resolveAssetPath("public"+this.path);if(!o)return console.log("found no path for",s,this.url),e.writeHead(404,{}),e.end();if(s&&(s.ttl>0&&(i["cache-control"]="max-age="+s.ttl),s.imports)){let a=[];for(let n=0,l=m(s.imports),h=l.length;n<h;n++){let f=l[n];a.push("<"+f.url+">; rel=modulepreload; as=script")}i.Link=a.join(", ")}return v.default.access(o,v.default.constants.R_OK,function(a){if(a)return console.log("could not find path",o),e.writeHead(404,{}),e.end();try{let n=v.default.createReadStream(o);return e.writeHead(200,i),n.pipe(e)}catch(n){return e.writeHead(503,{}),e.end()}})}createReadStream(){return v.default.createReadStream(this.path)}pipe(t){return this.createReadStream().pipe(t)}},yt=class{static wrap(t,e={}){return new this(t,e)}constructor(t,e){var s=this;S.add(this),this.id=Math.random(),this.options=e,this.closed=!1,this.paused=!1,this.server=t,this.clients=new Set,this.stalledResponses=[],this.assetResponders={},y.env.IMBA_PATH&&(this.devtoolsPath=P.default.resolve(y.env.IMBA_PATH,"dist","hmr.js")),this.scheme=t instanceof ot.default.Server?"http":"https";let i=this.server._events.request,o=globalThis[Jt];t.off("request",i),i[Ut]=this,t.on("listening",function(){let a=s.server.address(),n=a.address;(n=="::"||n=="0.0.0.0")&&(n="localhost");let l=""+s.scheme+"://"+n+":"+a.port+"/";return it.info("listening on %bold",l)}),p.on("change",function(a,n){return s.broadcast("manifest",n.data[Wt])}),this.handler=function(a,n){var l;let h=a instanceof at.Http2ServerRequest,f=a.url,u="/__assets__/";if(s.paused||s.closed)return n.statusCode=302,n.setHeader("Location",a.url),h||n.setHeader("Connection","close"),s.closed?(h&&a.stream.session.close(),n.end()):s.stalledResponses.push(n);if(f=="/__hmr__.js"&&s.devtoolsPath){let g=v.default.createReadStream(s.devtoolsPath);return n.writeHead(200,F.js),g.pipe(n)}if(f=="/__hmr__"){let g={"Content-Type":"text/event-stream","Cache-Control":"no-cache"};return h||(g.Connection="keep-alive"),n.writeHead(200,g),s.clients.add(n),s.broadcast("init",p.serializeForBrowser(),[n]),a.on("close",function(){return s.clients.delete(n)}),!0}if(f.indexOf(u)==0||p.urls[f])return((l=s.assetResponders)[f]||(l[f]=new bt(f,s))).respond(a,n);let c=a.headers,_;if(h?_=c[":scheme"]+"://"+c[":authority"]:_=(a.connection.encrypted?"https":"http")+"://"+c.host,e.static){let g=new URL(f,_),Pt=P.default.extname(g.pathname),k=F[Pt.slice(1)];if(k){let I=P.default.resolve(p.cwd,"."+g.pathname);if(v.default.existsSync(I)){v.default.readFile(I,function(D,Mt){return D?(n.writeHead(500,{}),n.write("Error getting the file: "+D)):(n.writeHead(200,k),n.end(Mt))});return}}}if(o){let g=new o.Location(a.url,_);return o.Document.create({location:g},function(){return i(a,n)})}else return i(a,n)},t.on("request",this.handler),t.on("close",function(){return console.log("server is closing!!!")}),A.default.isWorker&&(gt[lt](),gt.send("serve"))}broadcast(t,e={},s=this.clients){e=JSON.stringify(e);let i="data: "+e+`


`;for(let o of m(s))o.write("event: "+t+`
`),o.write(`id: imba
`),o.write(i);return this}pause(){return(this.paused!=!0?(this.paused=!0,!0):!1)&&this.broadcast("paused"),this}resume(){if(this.paused!=!1?(this.paused=!1,!0):!1)return this.broadcast("resumed"),this.flushStalledResponses()}flushStalledResponses(){for(let t=0,e=m(this.stalledResponses),s=e.length;t<s;t++)e[t].end();return this.stalledResponses=[]}close(){var t=this;return this.pause(),new Promise(function(e){return t.closed=!0,t.server.close(e),t.flushStalledResponses()})}};function $t(r,...t){return yt.wrap(r,...t)}var ge=Symbol.for("#__initor__"),be=Symbol.for("#__inited__"),ye=Symbol.for("#__hooks__"),wt=Symbol.for("#__init__"),Vt=Symbol.for("#__patch__"),vt=Symbol.for("#warned"),T=Symbol.for("#asset"),M=class{static wrap(t){let e=new M(t);return new Proxy(e,e)}constructor(t){this.meta=t}get input(){return p.inputs[this.meta.input]}get asset(){return globalThis._MF_?this.meta:this.input?this.input.asset:null}set(t,e,s){return!0}get(t,e){return this.meta.meta&&this.meta.meta[e]!=null?this.meta.meta[e]:this.asset?e=="absPath"&&!this.asset.absPath?this.asset.url:this.asset[e]:((this.meta[vt]!=!0?(this.meta[vt]=!0,!0):!1)&&console.warn("Asset for '"+this.meta.input+"' not found"),e=="valueOf"?function(){return""}:null)}},xt=class{[Vt](t={}){var e;(e=t.url)!==void 0&&(this.url=e),(e=t.meta)!==void 0&&(this.meta=e)}constructor(t=null){this[wt](t)}[wt](t=null,e=!0){this.url=t?t.url:void 0,this.meta=t?t.meta:void 0}adoptNode(t){var e;if((e=this.meta)==null?void 0:e.content){for(let s=this.meta.attributes,i=0,o=Object.keys(s),a=o.length,n,l;i<a;i++)n=o[i],l=s[n],t.setAttribute(n,l);t.innerHTML=this.meta.content}return this}toString(){return this.url}toStyleString(){return"url("+this.url+")"}};function St(r){var t,e;if(r[T])return r[T];if(r.type=="svg")return r[T]||(r[T]=new xt(r));if(r.input){let s=globalThis._MF_&&globalThis._MF_[r.input];return s&&(Object.assign(r,s),r.toString=function(){return this.absPath}),r[T]||(r[T]=M.wrap(r))}return r}var Ct=d(require("http"));var Tt=St({input:"entry:app/index.html"});var Gt=Ct.default.createServer(function(r,t){let e=Tt.body;return(process.env.IMBA_HMR||globalThis.IMBA_HMR)&&(e="<script src='/__hmr__.js'></script>"+e),t.end(e)});$t(Gt.listen(process.env.PORT||3e3),{static:!0});
//__FOOT__
//# sourceMappingURL=data:application/json;base64,
