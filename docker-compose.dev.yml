version: "3.8"
# For development purposes only!!!
services:
  database:
    image: postgres:alpine
    restart: on-failure
    container_name: database
    environment:
      - POSTGRES_USER=postgres_user
      - POSTGRES_PASSWORD=postgres_password
      - POSTGRES_DB=postgres_db
      - PGDATA=/var/lib/postgresql/data/pgdata/bolls_dev
    security_opt:
      - label:disable
    labels:
      - "traefik.enable=false"
    networks:
      - internal

  django:
    build:
      context: ./django/
      dockerfile: Dockerfile.dev
    restart: on-failure
    command: python manage.py runserver 0:8000
    # command: gunicorn bain.wsgi:application --bind 0.0.0.0:8000 -t 300
    container_name: django
    # required for SELinux
    security_opt:
      - label:disable
    volumes:
      - ./django:/code
    expose:
      - 8000
    ports:
      - 8000:8000
    environment:
      - DEBUG=1
      # - SECRET_KEY=SECRET_KEY_SECRET # use default one
      - DJANGO_ALLOWED_HOSTS=bolls.local 127.0.0.1 localhost
      - SQL_ENGINE=django.db.backends.postgresql
      - SQL_DATABASE=postgres_db
      - SQL_USER=postgres_user
      - SQL_PASSWORD=postgres_password
      - SQL_HOST=database
      - SQL_PORT=5432
      - DATABASE=postgres
      # May be omitted for dev
      # - EMAIL_HOST_PASSWORD=EMAIL_HOST_PASSWORD_SECRET
      # - EMAIL_HOST_USER=EMAIL_HOST_USER_SECRET
      # - SOCIAL_AUTH_GOOGLE_OAUTH2_KEY=SOCIAL_AUTH_GOOGLE_OAUTH2_KEY_SECRET
      # - SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET=SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET_SECRET
      # - SOCIAL_AUTH_GITHUB_KEY=SOCIAL_AUTH_GITHUB_KEY_SECRET
      # - SOCIAL_AUTH_GITHUB_SECRET=SOCIAL_AUTH_GITHUB_SECRET_SECRET
    networks:
      - internal
      - web
    depends_on:
      - database

  imba:
    build: ./django/bolls/static/bolls/
    # context: ./django/bolls/static/bolls/
    # dockerfile: Dockerfile
    restart: on-failure
    container_name: imba
    command: npm start
    # required for SELinux
    security_opt:
      - label:disable
    volumes:
      - ./django/bolls/static/bolls:/code:delegated

  nginx:
    build: ./nginx_dev
    restart: on-failure
    container_name: nginx
    labels:
      - "traefik.enable=true"
      # - "traefik.http.routers.nginx-router.tls=true"
      - "traefik.http.routers.nginx-router.rule=Host(`bolls.local`)"
      # - "traefik.http.routers.nginx-router.service=whoami1_service"
      - "traefik.http.services.nginx-router.loadbalancer.server.port=80"
      # - "traefik.http.routers.nginx-router.tls.certresolver=myresolver"
      - "traefik.webservice.frontend.entryPoints=http"
    # required for SELinux
    security_opt:
      - label:disable
    volumes:
      - ./django/bolls/static/:/home/bolls/web/static/:delegated
    networks:
      - internal
    depends_on:
      - django

  traefik:
    image: traefik:latest
    restart: unless-stopped
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      # - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      # - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      # - "--entrypoints.websecure.address=:443"
      # - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      # - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      # - "--certificatesresolvers.myresolver.acme.email=bpavlisinec@gmail.com"
      # - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    networks:
      - web
      - internal
    ports:
      - 80:80
      # - 443:443
      - 8080:8080
    # required for SELinux
    security_opt:
      - label:disable
    volumes:
      - "/var/letsencrypt:/letsencrypt"
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  internal:
    external: false
  web:
    external: true
